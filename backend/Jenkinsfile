pipeline {
  agent {label 'awsDeploy'}
  environment{
      DOCKERHUB_CREDENTIALS = credentials('bjones25-dockerhub')
      }

    stages {
     
      stage ('Build') {
        steps {
          dir('backend'){
            sh 'sudo docker build -t bjones25/d9backend .'
          }
        }
        post{
          failure {
            withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url')]) {
              sh 'python3 CICD_SlackNotif.py' 
            }

          }
        }
      }
     stage ('Login') {
        steps {
            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
        }
        post{
          failure {
            withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url')]) {
              sh 'python3 CICD_SlackNotif.py' 
            }

          }
        }
      }

     stage ('Push') {
        steps {
          dir('backend'){
            sh 'sudo docker push bjones25/d9backend'
          }
        }
        post{
          failure {
            withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url')]) {
              sh 'python3 CICD_SlackNotif.py' 
            }

          }
        }
     }

      stage ('Backend deployment') {
        agent {label 'awsDeploy2'}
        steps {
          dir('backend'){
            // sh 'kubectl apply -f deployment.yaml'
            sh 'kubectl delete -f deployment.yaml'
          }
        }
        post{
          failure {
            withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url')]) {
              sh 'python3 CICD_SlackNotif.py' 
            }

          }
        }
     }

     stage ('Backend service') {
        agent {label 'awsDeploy2'}
        steps {
          dir('backend'){
            // sh 'kubectl apply -f service.yaml '
            sh 'kubectl delete -f service.yaml'  
          }
        }
        post{
          failure {
            withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url')]) {
              sh 'python3 CICD_SlackNotif.py' 
            }

          }
        }
      }

      stage ('Slack Notification Success') {
        steps {
        sh 'echo running script' 
        }
        post{
          success {
            withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url'),
              string(credentialsId: 'PIPELINE_STATUS', variable: 'pipeline_status')]) {
                    sh 'python3 CICD_SlackNotif.py' 
              }

          }
        }
      }

    }
}
