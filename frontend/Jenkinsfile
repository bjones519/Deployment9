pipeline {
  agent {label 'awsDeploy'}
  environment{
    DOCKERHUB_CREDENTIALS = credentials('bjones25-dockerhub')
    WEBHOOK_URL = credentials('webhook_url')
    PIPELINE_STATUS = credentials('pipeline_status')
  }

    stages {
     
      stage ('Build') {
        steps {
          dir('frontend'){
            sh 'sudo docker build -t bjones25/d9frontend .'
          }
        }
      }
     stage ('Login') {
        steps {
            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
        }
      }

     stage ('Push') {
        steps {
          dir('frontnd'){
            sh 'sudo docker push bjones25/d9frontend'
          }
        }
     }

    //   stage ('Frontend deployment') {
    //     agent {label 'awsDeploy2'}
    //     steps {
    //       dir('frontend'){
    //         sh 'kubectl apply -f deployment.yaml'
    //       }
    //     }
    //  }

    //  stage ('Frontend service') {
    //     agent {label 'awsDeploy2'}
    //     steps {
    //       dir('frontend'){
    //         sh 'kubectl apply -f service.yaml '
    //       }
    //     }
    //  }

    //  stage ('Frontend Ingress') {
    //     agent {label 'awsDeploy2'}
    //     steps {
    //       dir('frontend'){
    //         sh 'kubectl apply -f ingress.yaml '
    //       }
    //     }
    //  }

     post{
        agent {label 'awsDeploy'}
        success {
          withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url'),
                           string(credentialsId: 'PIPELINE_STATUS', variable: 'pipeline_status')]) {
            {
              sh 'python3 CICD_SlackNotif.py' 
            }
          }
       
        }
      }

      post{
        agent {label 'awsDeploy'}
        failure {
          withCredentials([string(credentialsId: 'WEBHOOK_URL', variable: 'webhook_url')]) {
            {
              sh 'python3 CICD_SlackNotif.py' 
            }
          }
       
        }
      }


    }
}